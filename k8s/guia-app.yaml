--- # infnet-guia-app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infnet-guia-app
spec:
  replicas: 4
  selector:
    matchLabels:
      app: infnet-guia-app
  template:
    metadata:
      labels:
        app: infnet-guia-app
    spec:
      containers:
        - name: infnet-guia-app
          image: cleversantoro/infnet-guia-app:latest
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 3
--- # infnet-guia-app service
apiVersion: v1
kind: Service
metadata:
  name: infnet-guia-app-svc
spec:
  type: LoadBalancer
  selector:
    app: infnet-guia-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30080

--- # mysql
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: default
spec:
  selector:
    app: mysql
  ports:
    - port: 3306        
      targetPort: 3306  
  type: ClusterIP  
--- # mysql deployment
apiVersion: v1
kind: Pod
metadata:
  name: mysql
  namespace: default
  labels:
    app: mysql
spec:
  containers:
    - name: mysql
      image: mysql:8.0
      ports:
        - containerPort: 3306
      env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: project-database
        - name: MYSQL_USER
          value: user
        - name: MYSQL_PASSWORD
          value: password
      resources:
        requests:
          memory: "128Mi"
          cpu: "250m"
        limits:
          memory: "256Mi"
          cpu: "500m"
      volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
  volumes:
    - name: mysql-storage
      persistentVolumeClaim:
        claimName: mysql-pvc
--- #mysql persistent volume claim 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi        

--- #grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          #emptyDir: {} # usar PersistentVolumeClaim em produção
--- #grafana service
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
spec:
  type: LoadBalancer
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001
--- # ConfigMap for Grafana datasource
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
  namespace: default
  labels:
    grafana_datasource: "1"
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-svc.default.svc.cluster.local:9090
        isDefault: true
        editable: true
--- # PersistentVolume for Grafana      
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

--- #prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
          ports:
            - containerPort: 9090
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          configMap:
            name: prometheus-config
--- #prometheus service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: NodePort
--- # ConfigMap for Prometheus configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
 prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'infnet-guia-app'
        metrics_path: /api/metrics
        static_configs:
          - targets: ['infnet-guia-app-svc.default.svc.cluster.local:3000']
--- # PersistentVolume for Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi    

--- # ConfigMap for k6 script
apiVersion: batch/v1
kind: Job
metadata:
  name: k6-stress-test
  namespace: default
spec:
  template:
    spec:
      containers:
      - name: k6
        image: ghcr.io/grafana/k6:latest
        command: ["k6", "run", "/scripts/stress-test.js"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        volumeMounts:
        - name: k6-scripts
          mountPath: /scripts
      restartPolicy: Never
      volumes:
      - name: k6-scripts
        configMap:
          name: k6-script
  backoffLimit: 0   
--- # ConfigMap for k6 script  
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script
  namespace: default
data:
  stress-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
      vus: 100,
      duration: '2m',
      thresholds: {
        http_req_failed: ['rate<0.05'],
        http_req_duration: ['p(95)<1000'],
      },
    };

    export default function () {
      const res = http.get('http://127.0.0.1:56260/api/process');
      check(res, {
        'status is 200': (r) => r.status === 200,
      });
    }          