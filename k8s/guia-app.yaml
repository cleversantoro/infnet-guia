--- # infnet-guia-app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infnet-guia-app
spec:
  replicas: 4
  selector:
    matchLabels:
      app: infnet-guia-app
  template:
    metadata:
      labels:
        app: infnet-guia-app
    spec:
      containers:
        - name: infnet-guia-app
          image: cleversantoro/infnet-guia-app:latest
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 15

--- # infnet-guia-app service
apiVersion: v1
kind: Service
metadata:
  name: infnet-guia-app-service
spec:
  type: LoadBalancer
  selector:
    app: infnet-guia-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30080

--- #grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3002
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          emptyDir: {} # usar PersistentVolumeClaim em produção
--- #grafana service
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
spec:
  type: LoadBalancer
  selector:
    app: grafana
  ports:
    - port: 3002
      targetPort: 3002
      nodePort: 30001

--- #prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
          ports:
            - containerPort: 9090
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          configMap:
            name: prometheus-config
--- #prometheus service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: LoadBalancer
--- # ConfigMap for Prometheus configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
 prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'infnet-guia-app'
        metrics_path: /api/metrics
        static_configs:
          - targets: ['infnet-guia-app-service.default.svc.cluster.local:3000']

--- # PersistentVolume for Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi           